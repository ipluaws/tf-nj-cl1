name: Build and Deploy

on:
  workflow_dispatch:
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install wheel
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE_TAG="latest"
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/notejam:$IMAGE_TAG .

      - name: Push Docker image to ECR
        run: |
          IMAGE_TAG="latest"
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/notejam:$IMAGE_TAG

      - name: Check if ECS service exists
        id: check-service
        run: |
          SERVICE_NAME="notejam-service"
          CLUSTER_NAME="${{ secrets.ECS_CLUSTER_NAME }}"
          SERVICE_STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].status" --output text)

          if [ "$SERVICE_STATUS" == "ACTIVE" ]; then
            echo "Service is running. Deleting the existing service..."
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --desired-count 0
            aws ecs delete-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force
            echo "Service deleted."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Service does not exist or is inactive."
            echo "exists=false" >> $GITHUB_ENV
          fi
      - name: Wait for service to terminate
        if: env.exists == 'true'
        run: |
          SERVICE_NAME="notejam-service"
          CLUSTER_NAME="${{ secrets.ECS_CLUSTER_NAME }}"
          while :
          do
            SERVICE_STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[0].status" --output text || echo "INACTIVE")
            if [ "$SERVICE_STATUS" == "INACTIVE" ]; then
              echo "Service is fully terminated."
              break
            fi
            echo "Waiting for service to terminate..."
            sleep 10
          done

      - name: Initialize Terraform
        run: |
          cd deploy
          terraform init

      - name: Apply Terraform Configuration
        run: |
          cd deploy
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/notejam:latest"
          terraform apply -auto-approve -var "container_image=$IMAGE_URI"
